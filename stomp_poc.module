<?php

/**
 * @file
 *
 * The main module file for a simple STOMP php Proof of Concept. The idea is to be able to active the
 * fedora microservices content model listeners directly from PHP, so we don't have to bother fedora
 * when we are doing reconnects etc.
 */

/**
 * Implementaion of hook_menu()
 */
function stomp_poc_menu() {
  $items = array();

  $items['stomp'] = array(
    'title' => 'Islandora Settings',
    'description' => 'Configure Islandora and all its related modules.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stomp_poc_page'),
    'access arguments' => array('anonymous'),
  );

  return $items;
}

/**
 * The form for the simple stomp POC. Returns the form.
 */
function stomp_poc_page(&$form_state) {
  $form = array();

  $form['queue'] = array(
    '#type' => 'textfield',
    '#title' => t('The STOMP Queue'),
    '#default_value' => 'islandora',
    '#required' => TRUE,
  );

  $form['method'] = array(
    '#type' => 'textfield',
    '#title' => t('method'),
    '#default_value' => 'sample',
    '#description' => 'the method that stomp will respond to.',
    '#required' => TRUE,
  );

  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('body of message'),
    '#default_value' => 'test',
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send Message!')
  );

  return $form;
}

/**
 * The submit function where all that stomp magic happens.
 */
function stomp_poc_page_submit(&$form, &$form_state) {

  $values = $form_state['values'];

  $headers = array();
  $headers['method'] = $values['method'];

  require_once("Stomp.php");

  // make a connection
  $con = new Stomp("tcp://localhost:61613");

  // connect
  $con->connect();

  $body = json_encode($values);

  // send a message to the queue
  $con->send('/topic/' . $values['queue'], $body, $headers);
  echo "Sent message with body 'test'\n";

  // disconnect
  $con->disconnect();
}
